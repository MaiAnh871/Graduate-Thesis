<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32\52367\Obj\HT32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32\52367\Obj\HT32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Mon May 15 16:26:49 2023
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; loop &rArr; extractMainData &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">ADC_IRQHandler</a><BR>
 <LI><a href="#[61]">I2C_TargetAddressConfig</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">I2C_TargetAddressConfig</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">ADC_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[f]">AES_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[17]">BFTM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[18]">BFTM1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[26]">BootProcess</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[d]">COMP_DAC_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[9]">EVWUP_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[12]">GPTM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f5xxxx_01_it.o(.text.HardFault_Handler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[19]">I2C0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[22]">I2S_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[6]">LVD_BOD_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[10]">MCTM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ht32f5xxxx_01_it.o(.text.NMI_Handler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[24]">PDMA_CH0_1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[25]">PDMA_CH2_5_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[15]">PWM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[16]">PWM1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from ht32f5xxxx_01_it.o(.text.PendSV_Handler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[11]">QSPI_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[21]">SCI_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[13]">SCTM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[14]">SCTM1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1b]">SPI0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1c]">SPI1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from ht32f5xxxx_01_it.o(.text.SVC_Handler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from ht32f5xxxx_01_it.o(.text.SysTick_Handler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_ht32f5xxxx_03.o(.text.SystemInit) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1f]">UART0_UART2_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[20]">UART1_UART3_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1d]">USART0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1e]">USART1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[23]">USB_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[2b]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[2a]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[2d]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[2c]">isspace</a> from isspace_c.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[29]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>COMP_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[9]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>LVD_BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PDMA_CH0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PDMA_CH2_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SCTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1f]"></a>UART0_UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[20]"></a>UART1_UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[31]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[92]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[93]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[94]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[95]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[96]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[7a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishMessage_AT_QMTPUB
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientPrivateKey_AT_QSSLCFG
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientCert_AT_QSSLCFG
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCACert_AT_QSSLCFG
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCommand
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRawGPS
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6c]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Receive
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRawGPS
</UL>

<P><STRONG><a name="[6f]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Send
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishMessage_AT_QMTPUB
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientPrivateKey_AT_QSSLCFG
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientCert_AT_QSSLCFG
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCACert_AT_QSSLCFG
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCommand
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[75]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMainData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRawGPS
</UL>

<P><STRONG><a name="[78]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishMessage_AT_QMTPUB
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRawGPS
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientPrivateKey_AT_QSSLCFG
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientCert_AT_QSSLCFG
</UL>

<P><STRONG><a name="[72]"></a>strtok</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMainData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRawGPS
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMainData
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMainData
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMainData
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMainData
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMainData
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishMessage_AT_QMTPUB
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMainData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__strtod_int</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[9e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[37]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[40]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3f]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[32]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[9f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>isspace</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, isspace_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[53]"></a>_scanf_really_real</STRONG> (Thumb, 584 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[2a]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[a1]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__ctype_lookup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_ul2d</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[57]"></a>AFIO_GPxConfig</STRONG> (Thumb, 376 bytes, Stack size 76 bytes, ht32f5xxxx_gpio.o(.text.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[5f]"></a>CKCU_GetPeripFrequency</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(.text.CKCU_GetPeripFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKCU_GetPeripFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[56]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(.text.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[5a]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(.text.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDInit
</UL>

<P><STRONG><a name="[59]"></a>GPIO_DriveConfig</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, ht32f5xxxx_gpio.o(.text.GPIO_DriveConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_DriveConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDInit
</UL>

<P><STRONG><a name="[58]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ht32f5xxxx_gpio.o(.text.GPIO_PullResistorConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PullResistorConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[55]"></a>HT32F_DVB_LEDInit</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ht32_board.o(.text.HT32F_DVB_LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HT32F_DVB_LEDInit &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[84]"></a>HT32F_DVB_LEDOff</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32_board.o(.text.HT32F_DVB_LEDOff))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[83]"></a>HT32F_DVB_LEDOn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32_board.o(.text.HT32F_DVB_LEDOn))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[87]"></a>HT32F_DVB_LEDToggle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32_board.o(.text.HT32F_DVB_LEDToggle))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(.text.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
</UL>

<P><STRONG><a name="[5b]"></a>I2C_Configuration</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, mc3416.o(.text.I2C_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2C_Configuration &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetTimeOutValue
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[67]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(.text.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Mem_Slave
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mem_Slave
</UL>

<P><STRONG><a name="[5c]"></a>I2C_Init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ht32f5xxxx_i2c.o(.text.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Init &rArr; CKCU_GetPeripFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
</UL>

<P><STRONG><a name="[68]"></a>I2C_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ht32f5xxxx_i2c.o(.text.I2C_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Mem_Slave
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mem_Slave
</UL>

<P><STRONG><a name="[66]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(.text.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Mem_Slave
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mem_Slave
</UL>

<P><STRONG><a name="[5e]"></a>I2C_SetTimeOutValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(.text.I2C_SetTimeOutValue))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
</UL>

<P><STRONG><a name="[61]"></a>I2C_TargetAddressConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(.text.I2C_TargetAddressConfig))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TargetAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Mem_Slave
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TargetAddressConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mem_Slave
</UL>

<P><STRONG><a name="[62]"></a>MC3416_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mc3416.o(.text.MC3416_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MC3416_Init &rArr; Read_Mem_Slave &rArr; I2C_ReadRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Mem_Slave
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mem_Slave
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[65]"></a>MC3416_Read_Accel</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mc3416.o(.text.MC3416_Read_Accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MC3416_Read_Accel &rArr; Read_Mem_Slave &rArr; I2C_ReadRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mem_Slave
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>Read_Mem_Slave</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, mc3416.o(.text.Read_Mem_Slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Read_Mem_Slave &rArr; I2C_ReadRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegister
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TargetAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC3416_Read_Accel
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC3416_Init
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 364 bytes, Stack size 44 bytes, system_ht32f5xxxx_03.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>USART0_Receive</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, main.o(.text.USART0_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART0_Receive &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishMessage_AT_QMTPUB
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientPrivateKey_AT_QSSLCFG
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientCert_AT_QSSLCFG
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCACert_AT_QSSLCFG
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCommand
</UL>

<P><STRONG><a name="[6d]"></a>USART0_Send</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, main.o(.text.USART0_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART0_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishMessage_AT_QMTPUB
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientPrivateKey_AT_QSSLCFG
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientCert_AT_QSSLCFG
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCACert_AT_QSSLCFG
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCommand
</UL>

<P><STRONG><a name="[6a]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(.text.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Receive
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Send
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishMessage_AT_QMTPUB
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRawGPS
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientPrivateKey_AT_QSSLCFG
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientCert_AT_QSSLCFG
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCACert_AT_QSSLCFG
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCommand
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[70]"></a>USART_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ht32f5xxxx_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_Init &rArr; CKCU_GetPeripFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[6b]"></a>USART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(.text.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Receive
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRawGPS
</UL>

<P><STRONG><a name="[6e]"></a>USART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(.text.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Send
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishMessage_AT_QMTPUB
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientPrivateKey_AT_QSSLCFG
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientCert_AT_QSSLCFG
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCACert_AT_QSSLCFG
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCommand
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[85]"></a>USART_TxRxCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(.text.USART_TxRxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[63]"></a>Write_Mem_Slave</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, mc3416.o(.text.Write_Mem_Slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Write_Mem_Slave &rArr; I2C_ReadRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegister
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TargetAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC3416_Init
</UL>

<P><STRONG><a name="[71]"></a>extractMainData</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, main.o(.text.extractMainData))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = extractMainData &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[76]"></a>getRawGPS</STRONG> (Thumb, 120 bytes, Stack size 120 bytes, main.o(.text.getRawGPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = getRawGPS &rArr; strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[79]"></a>loop</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, main.o(.text.loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = loop &rArr; extractMainData &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishMessage_AT_QMTPUB
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMainData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRawGPS
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC3416_Read_Accel
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCommand
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; loop &rArr; extractMainData &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7c]"></a>publishMessage_AT_QMTPUB</STRONG> (Thumb, 912 bytes, Stack size 72 bytes, main.o(.text.publishMessage_AT_QMTPUB))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = publishMessage_AT_QMTPUB &rArr; USART0_Receive &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Receive
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[7b]"></a>sendCommand</STRONG> (Thumb, 676 bytes, Stack size 48 bytes, main.o(.text.sendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sendCommand &rArr; USART0_Receive &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Receive
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[80]"></a>setCACert_AT_QSSLCFG</STRONG> (Thumb, 1020 bytes, Stack size 40 bytes, main.o(.text.setCACert_AT_QSSLCFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = setCACert_AT_QSSLCFG &rArr; USART0_Receive &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Receive
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[81]"></a>setClientCert_AT_QSSLCFG</STRONG> (Thumb, 1020 bytes, Stack size 40 bytes, main.o(.text.setClientCert_AT_QSSLCFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = setClientCert_AT_QSSLCFG &rArr; USART0_Receive &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Receive
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[82]"></a>setClientPrivateKey_AT_QSSLCFG</STRONG> (Thumb, 1020 bytes, Stack size 40 bytes, main.o(.text.setClientPrivateKey_AT_QSSLCFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = setClientPrivateKey_AT_QSSLCFG &rArr; USART0_Receive &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Receive
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[7d]"></a>setup</STRONG> (Thumb, 992 bytes, Stack size 56 bytes, main.o(.text.setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = setup &rArr; I2C_Configuration &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDToggle
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientPrivateKey_AT_QSSLCFG
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientCert_AT_QSSLCFG
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCACert_AT_QSSLCFG
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCommand
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC3416_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDOff
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDOn
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_LEDInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a2]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[7e]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishMessage_AT_QMTPUB
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientPrivateKey_AT_QSSLCFG
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setClientCert_AT_QSSLCFG
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCACert_AT_QSSLCFG
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCommand
</UL>

<P><STRONG><a name="[a3]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[a4]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[4b]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[8f]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[a5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[90]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[54]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[73]"></a>atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMainData
</UL>

<P><STRONG><a name="[86]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[26]"></a>BootProcess</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[89]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[8d]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[48]"></a>_local_sscanf</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[50]"></a>_fp_value</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
